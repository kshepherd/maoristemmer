package org.apache.lucene.analysis.mi;

import org.tartarus.snowball.Among;

 /**
  * This class was automatically generated by a Snowball to Java compiler
  * It implements the stemming algorithm defined by a snowball script.
  */

public class MaoriStemmer extends org.tartarus.snowball.SnowballProgram {

    private static final long serialVersionUID = 1L;
private final static MaoriStemmer methodObject = new MaoriStemmer ();

private final static Among a_0[] = {
    new Among("a", -1, 1, "", methodObject),
    new Among("nga", 0, 1, "", methodObject),
    new Among("ia", 0, 1, "", methodObject),
    new Among("ngia", 2, 1, "", methodObject),
    new Among("hia", 2, 1, "", methodObject),
    new Among("whia", 4, 1, "", methodObject),
    new Among("kia", 2, 1, "", methodObject),
    new Among("mia", 2, 1, "", methodObject),
    new Among("ria", 2, 1, "", methodObject),
    new Among("tia", 2, 1, "", methodObject),
    new Among("wh\u00C4\u0081ia", 2, 1, "", methodObject),
    new Among("wh\u00C3\u00A4ia", 2, 1, "", methodObject),
    new Among("na", 0, 1, "", methodObject),
    new Among("ina", 12, 1, "", methodObject),
    new Among("whina", 13, 1, "", methodObject),
    new Among("kina", 13, 1, "", methodObject)
};

private static final char g_v[] = {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 68, 32, 8, 1, 0, 4, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 4 };

private int I_p2;
private int I_p1;
private int I_pV;


private boolean r_mark_regions() {
    // (, line 32
    I_pV = limit;
    I_p1 = limit;
    I_p2 = limit;
    // do, line 38
    int v_1 = cursor;
    lab0: do {
        // (, line 38
        // gopast, line 39
        golab1: while(true)
        {
            lab2: do {
                if (!(in_grouping(g_v, 97, 363)))
                {
                    break lab2;
                }
                break golab1;
            } while (false);
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // setmark pV, line 39
        I_pV = cursor;
    } while (false);
    cursor = v_1;
    // do, line 41
    int v_3 = cursor;
    lab3: do {
        // (, line 41
        // gopast, line 42
        golab4: while(true)
        {
            lab5: do {
                if (!(in_grouping(g_v, 97, 363)))
                {
                    break lab5;
                }
                break golab4;
            } while (false);
            if (cursor >= limit)
            {
                break lab3;
            }
            cursor++;
        }
        // gopast, line 42
        golab6: while(true)
        {
            lab7: do {
                if (!(out_grouping(g_v, 97, 363)))
                {
                    break lab7;
                }
                break golab6;
            } while (false);
            if (cursor >= limit)
            {
                break lab3;
            }
            cursor++;
        }
        // setmark p1, line 42
        I_p1 = cursor;
        // gopast, line 43
        golab8: while(true)
        {
            lab9: do {
                if (!(in_grouping(g_v, 97, 363)))
                {
                    break lab9;
                }
                break golab8;
            } while (false);
            if (cursor >= limit)
            {
                break lab3;
            }
            cursor++;
        }
        // gopast, line 43
        golab10: while(true)
        {
            lab11: do {
                if (!(out_grouping(g_v, 97, 363)))
                {
                    break lab11;
                }
                break golab10;
            } while (false);
            if (cursor >= limit)
            {
                break lab3;
            }
            cursor++;
        }
        // setmark p2, line 43
        I_p2 = cursor;
    } while (false);
    cursor = v_3;
    return true;
}

private boolean r_RV() {
    if (!(I_pV <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_R1() {
    if (!(I_p1 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_R2() {
    if (!(I_p2 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_verb_sfx() {
    int among_var;
    // (, line 55
    // [, line 56
    ket = cursor;
    // substring, line 56
    among_var = find_among_b(a_0, a_0.length);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 56
    bra = cursor;
    switch (among_var) {
        case 0:
            return false;
        case 1:
            // (, line 60
            // call RV, line 60
            if (!r_RV())
            {
                return false;
            }
            // delete, line 60
            slice_del();
            break;
    }
    return true;
}

public boolean stem() {
    // (, line 66
    // do, line 67
    lab0: do {
        // call mark_regions, line 67
        if (!r_mark_regions())
        {
            break lab0;
        }
    } while (false);
    // backwards, line 68
    limit_backward = cursor;
    cursor = limit;
    // (, line 68
    // do, line 69
    int v_2 = limit - cursor;
    lab1: do {
        // call verb_sfx, line 69
        if (!r_verb_sfx())
        {
            break lab1;
        }
    } while (false);
    cursor = limit - v_2;
    cursor = limit_backward;
    return true;
}

public boolean equals( Object o ) {
    return o instanceof MaoriStemmer;
}

public int hashCode() {
    return MaoriStemmer.class.getName().hashCode();
}



}

